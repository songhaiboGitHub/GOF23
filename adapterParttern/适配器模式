· 结构型模式：
      - 核心作用：是从程序的结构上实现松耦合，从而可以扩大整体类结构，用来解决更大的问题。
      - 分类：
          · 适配器模式、代理模式、桥接模式、装饰器模式、组合模式、外观模式、享元模式

· 适配器模式adapter：
      - 生活中的场景 手机充电器USB和家用插座不一样 此时需要充电器大头来转换适配


· 什么是适配器模式adapter？
      - 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的哪些类可以在一起工作。


· 模式中的角色
      - 目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。
      - 需要适配的类（Usb（USB充电线））：需要适配的类或是适配者类。
      - 适配器（Adapter (充电器大头)）：通过包装一个需要适配的对象，把原接口转换成目标接口。


· 适配器模式实现两种方式
      - 类适配方式  缺点Java类是单继承
      - 对象适配方式 直接组合对象适配


· 工作中的场景
      - 经常用来做旧系统改造和升级
      - 如果我们的系统开发之后再也不需要维护，那么很多模式都是没必要的，但是不幸的是，事实却是维护一个系统的代价往往是开发一个系统的倍数。


· 应用场景
      - java.io.InputStreamReader(InputStream)
      - java.io.OutputStreamWriter(OutputStream)